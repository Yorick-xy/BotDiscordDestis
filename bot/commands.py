import discord
import random
import requests
from datetime import datetime
from discord.ext import commands
from bot.cve_view import CVEView
from .cve_view import send_cve_to_discord

API_URL_CVE = "https://services.nvd.nist.gov/rest/json/cves/2.0"
API_URL_NEWS = "https://hn.algolia.com/api/v1/search?query=cybersecurity"

# Commande d'aide
@commands.command(name='aide')
async def aide(ctx):
    help_message = """
    Voici une liste des commandes disponibles :
    üèì !ping - Teste la latence du bot
    üìä !status - Affiche le statut du bot
    ‚è∞ !reminder [temps en minutes] [message] - D√©finit un rappel
    üî• !vuln - Affiche les derni√®res vuln√©rabilit√©s
    üé≠ !ajouter_role [membre] [role] - Ajoute un r√¥le √† un membre
    üïí !time - Affiche l'heure actuelle
    üîê !news - Affiche les derni√®res actualit√©s en cybers√©curit√©
    ü§° !blague - Le bot vous raconte une blague !
    """
    await ctx.send(help_message)

# Commande Ping
@commands.command()
async def ping(ctx):
    latency = round(ctx.bot.latency * 1000)  # Latence en ms
    await ctx.send(f'üèì Pong ! Latence : {latency} ms')

# Commande Status
@commands.command()
async def status(ctx):
    await ctx.send("‚úÖ Le bot fonctionne parfaitement !")

# Commande Blague
@commands.command()
async def blague(ctx):
    blagues = [
       "Quel est le comble pour un √©lectricien ? De ne pas √™tre au courant !",
        "Pourquoi les oiseaux ne jouent-ils pas au poker ? Parce qu'ils ont peur des chats !",
        "Chuck Norris peut faire un habit avec un moine.",
        "Les requins regardent Les Dents de Chuck Norris √† leurs soir√©es films d'horreur.",
        "Chuck Norris peut faire de la bi√®re en brassant de l'air.",
        "Chuck Norris mine de la crypto-monnaie avec la calculette de sa montre Casio",
        "Chuck Norris a d√©j√† compt√© jusqu'√† l'infini. Deux fois.",
        "Chuck Norris peut diviser par z√©ro.",
        "Un jour, Lara Croft √† voulu battre Chuck Norris, maintenant on l'appelle Dora L'exploratrice",
        "Chuck Norris a d√©j√† fini World of Warcraft.",
        "Chuck Norris ne se masturbe jamais. Chuck Norris est in√©branlable.",
        "Un jour, les PowerRangers ont rencontr√© Chuck Norris. Maintenant on les appelle les T√©l√©tubbies.",
        "Chuck Norris n'a pas de p√®re. On ne nique pas la m√®re de Chuck Norris.",
        "Un jour Chuck Norris a eu un zero en latin, depuis c'est une langue morte.",
        "Certains disent : La violence ne r√©sout rien, Chuck Norris leur r√©pond C'est que t'as pas tap√© assez fort",
        "Chuck Norris a retrouv√© Ornicar.",
        "Quand Chuck Norris s'est mis aux arts martiaux, les Japonais se sont reconvertis dans les jeux videos.",
        "Chuck Norris ne d√©pose pas d'argent √† la banque. Chuck Norris n'√©pargne rien, ni personne.",
        "Chuck Norris a accroch√© Magneto des X-men sur son frigo.",
        "Si Chuck Norris te donne rendez-vous le 30 Fevrier, tu y vas.",
        "Aux Jeux Olympiques, Chuck Norris a √©t√© disqualifi√© de l'√©preuve de natation. Il courait sur l'eau.",
        "Si les anglais roulent √† gauche, c'est parce que Chuck Norris roule √† droite.",
        "Pourquoi est-ce qu'il faut mettre tous les crocos en prison ? : Parce que les crocos dealent.",
        "Que se passe-t-il quand 2 poissons s'√©nervent ? : Le thon monte.",
        "Quel est le sport pr√©f√©r√© des insectes ? : Le cricket.",
        "Qu'est-ce qu'une frite enceinte ? : Une patate saut√©e."
    ]
    await ctx.send(random.choice(blagues))

# Commande Vuln
@commands.command()
async def vuln(ctx):
    response = requests.get(API_URL_CVE)
    if response.status_code == 200:
        data = response.json()["vulnerabilities"]
        cve_list = data[:3]  # R√©cup√©rer les 3 premi√®res CVE

        for cve in cve_list:
            cve_id = cve["cve"]["id"]
            description = cve["cve"]["descriptions"][0]["value"]
            
            embed = discord.Embed(title=cve_id, url=f"https://nvd.nist.gov/vuln/detail/{cve_id}", description=description, color=discord.Color.red())
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå Impossible de r√©cup√©rer les vuln√©rabilit√©s.")

# Recherche par mot-cl√©
@commands.command()
async def search(ctx, *, keyword: str):
    url = f"{API_URL_CVE}?keywordSearch={keyword}"
    response = requests.get(url)

    if response.status_code == 200:
        data = response.json().get("vulnerabilities", [])
        if not data:
            await ctx.send(f"‚ö†Ô∏è Aucune CVE trouv√©e pour '{keyword}'.")
            return

        cve_list = [{"id": cve["cve"]["id"], "description": cve["cve"]["descriptions"][0]["value"], "score": cve.get("cve", {}).get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("baseScore", "N/A")} for cve in data[:3]]

        for cve in cve_list:
            embed = discord.Embed(title=cve["id"], description=cve["description"], color=discord.Color.blue())
            embed.add_field(name="Score CVSS", value=cve["score"], inline=True)
            embed.add_field(name="üîó Lien", value=f"[Voir plus](https://nvd.nist.gov/vuln/detail/{cve['id']})", inline=False)
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå Erreur lors de la r√©cup√©ration des CVE.")

# Commande pour obtenir les derni√®res CVE
@commands.command()
async def cve(ctx):
    response = requests.get(API_URL_CVE)
    
    if response.status_code == 200:
        data = response.json().get("vulnerabilities", [])
        if not data:
            await ctx.send("‚ö†Ô∏è Aucune CVE trouv√©e.")
            return

        cve_list = [{"id": cve["cve"]["id"], "description": cve["cve"]["descriptions"][0]["value"], "score": cve.get("cve", {}).get("metrics", {}).get("cvssMetricV2", [{}])[0].get("cvssData", {}).get("baseScore", "N/A")} for cve in data[:5]]

        embed = discord.Embed(title=cve_list[0]["id"], description=cve_list[0]["description"], color=discord.Color.red())
        embed.add_field(name="Score CVSS", value=cve_list[0]["score"], inline=True)
        embed.add_field(name="üîó Lien", value=f"[Voir plus](https://nvd.nist.gov/vuln/detail/{cve_list[0]['id']})", inline=False)

        await ctx.send(embed=embed, view=CVEView(cve_list))
    else:
        await ctx.send("‚ùå Impossible de r√©cup√©rer les CVE.")

# Commande News Cybers√©curit√©
@commands.command()
async def news(ctx):
    response = requests.get(API_URL_NEWS)
    if response.status_code == 200:
        articles = response.json().get("hits", [])[:3]  # R√©cup√©rer les 3 premiers articles
        
        for article in articles:
            title = article["title"]
            url = article["url"]
            embed = discord.Embed(title=title, url=url, color=discord.Color.blue())
            await ctx.send(embed=embed)
    else:
        await ctx.send("‚ùå Impossible de r√©cup√©rer les actualit√©s en cybers√©curit√©.")

# Commande Say
@commands.command()
async def say(ctx, *, message: str):
    await ctx.message.delete()  # Supprime le message original
    await ctx.send(message)

# Commande Ajouter r√¥le
@commands.command()
async def ajouter_role(ctx, membre: discord.Member, role: discord.Role):
    await membre.add_roles(role)
    await ctx.send(f'‚úÖ Le r√¥le {role.name} a √©t√© ajout√© √† {membre.mention}')

# Commande Heure actuelle
@commands.command()
async def time(ctx):
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    await ctx.send(f"üïí Heure actuelle : {now}")

@commands.command(name='get_cve')
async def get_cve(ctx):
    """Commande manuelle pour r√©cup√©rer et afficher les CVE."""
    await send_cve_to_discord(ctx.bot)
    await ctx.send("‚úÖ CVE r√©cup√©r√©es et envoy√©es.")